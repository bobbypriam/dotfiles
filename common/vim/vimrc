"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=/Users/bobbypriambodo/.vim/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('/Users/bobbypriambodo/.vim/dein')
  call dein#begin('/Users/bobbypriambodo/.vim/dein')

  " Let dein manage dein
  " Required:
  call dein#add('/Users/bobbypriambodo/.vim/dein/repos/github.com/Shougo/dein.vim')

  " Add or remove your plugins here:
  call dein#add('Shougo/vimproc.vim', {'build' : 'make'})

  " Essentials
  call dein#add('scrooloose/nerdtree', {'on_cmd': 'NERDTreeToggle'})
  call dein#add('tpope/vim-surround')
  call dein#add('tpope/vim-repeat')
  call dein#add('tpope/vim-fugitive')
  call dein#add('tpope/vim-commentary')
  call dein#add('jiangmiao/auto-pairs')
  call dein#add('ctrlpvim/ctrlp.vim')

  " Auto-completion
  " call dein#add('Shougo/neocomplete.vim', {'on_i': 1})
  call dein#add('Shougo/deoplete.nvim', {'on_i': 1})

  " Syntax checker
  call dein#add('neomake/neomake')

  " Lightline status line
	call dein#add('itchyny/lightline.vim')

  " Nord theme
  call dein#add('arcticicestudio/nord-vim')

  " Languages
  call dein#add('elixir-lang/vim-elixir', { 'on_ft': 'elixir' })
  call dein#add('slashmili/alchemist.vim', { 'on_ft': 'elixir' })
  " call dein#add('reasonml-editor/vim-reason', { 'on_ft': 'reason' })
  " call dein#add('eagletmt/ghcmod-vim', { 'on_ft': 'haskell' })
  " call dein#add('eagletmt/neco-ghc', { 'on_ft': 'haskell' })
  call dein#add('parsonsmatt/intero-neovim', { 'on_ft': 'haskell' })

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
" if dein#check_install()
"   call dein#install()
" endif

"End dein Scripts-------------------------

filetype plugin indent on
syntax enable
set nu

" Fix backspace behavior
set backspace=indent,eol,start

" Colorscheme
color nord

" Encoding
set encoding=utf8

" Generic config
set expandtab                 " Use spaces instead of tabs
set tabstop=2                 " Use 2 spaces for tabs
set shiftwidth=2              " Use 2 spaces for tabs
set softtabstop=2             " Use 2 spaces for tabs
set autoread                  " Set to auto read when a file is changed from the outside
set ai                        " Auto indent
set nospell                   " Don't need spelling

" Trim trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" Easy windows
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h

" Easy move lines
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Clear buffer
nmap <leader>b :bufdo bd<CR>

" CtrlP to CommandP
map <D-p> :CtrlP<CR>

" Ctrl+e to open nerdtree
map <C-e> :NERDTreeToggle<CR>

" OCaml keybindings
autocmd FileType ocaml nnoremap <C-i> :MerlinTypeOf<CR>
autocmd FileType ocaml nnoremap <Enter> :MerlinTypeOf<CR>
autocmd FileType ocaml nnoremap <C-b> :MerlinLocate<CR>
autocmd FileType ocaml nnoremap <C-k> :MerlinClearEnclosing<CR>
autocmd FileType ocaml nnoremap <C-q> :MerlinDocument<CR>

" Haskell keybindings
autocmd FileType haskell map <C-i> <Plug>InteroGenericType
autocmd FileType haskell map <C-t> <Plug>InteroType
autocmd FileType haskell nnoremap <C-b> :InteroGoToDef<CR>

" Disable haskell-vim omnifunc
" let g:haskellmode_completion_ghc = 0
" autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" Lightline configuration
let g:lightline = {
      \ 'colorscheme': 'nord'
      \ }
			" \ 'separator': { 'left': '', 'right': '' },
      " \ 'subseparator': { 'left': '', 'right': '' }
set laststatus=2

" ALE configurations
" let g:ale_sign_column_always = 1
" let g:ale_sign_error = 'E'
" let g:ale_sign_warning = 'W'

" ctrlp custom ignore, ignoring .gitignore content
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" Neocomplete configuration
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" Use deoplete
let g:deoplete#enable_at_startup = 1

" OCaml Merlin configuration
let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"
" ## added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 ## you can edit, but keep this line
let s:opam_share_dir = system("opam config var share")
let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')

let s:opam_configuration = {}

function! OpamConfOcpIndent()
  execute "set rtp^=" . s:opam_share_dir . "/ocp-indent/vim"
endfunction
let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')

function! OpamConfOcpIndex()
  execute "set rtp+=" . s:opam_share_dir . "/ocp-index/vim"
endfunction
let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')

function! OpamConfMerlin()
  let l:dir = s:opam_share_dir . "/merlin/vim"
  execute "set rtp+=" . l:dir
endfunction
let s:opam_configuration['merlin'] = function('OpamConfMerlin')

let s:opam_packages = ["ocp-indent", "ocp-index", "merlin"]
let s:opam_check_cmdline = ["opam list --installed --short --safe --color=never"] + s:opam_packages
let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
for tool in s:opam_packages
  " Respect package order (merlin should be after ocp-index)
  if count(s:opam_available_tools, tool) > 0
    call s:opam_configuration[tool]()
  endif
endfor
" ## end of OPAM user-setup addition for vim / base ## keep this line
" ## added by OPAM user-setup for vim / ocp-indent ## 8d1b0851193b09442f5dee52fefd0e36 ## you can edit, but keep this line
if count(s:opam_available_tools,"ocp-indent") == 0
  source "/Users/bobbypriambodo/.opam/4.04.2/share/vim/syntax/ocp-indent.vim"
endif
" ## end of OPAM user-setup addition for vim / ocp-indent ## keep this line
